name: Release with commit

on:
  push:
    branches:
      - main

env:
  DOTNET_NOLOGO: true
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true

# Inspired by https://github.com/MicrosoftDocs/windows-uwp/blob/docs/hub/apps/package-and-deploy/ci-for-winui3.md
jobs:
  pre-release:
    name: "Pre Release"
    runs-on: "windows-latest"

    steps:
      - uses: actions/checkout@v2

      - name: Setup .NET
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 7.0.x
          include-prerelease: true
      
      - name: Setup MSBuild.exe
        uses: microsoft/setup-msbuild@v1.0.2

      - name: Install dependencies
        run: msbuild src\WinUi\WinUi.csproj /t:Restore /p:Configuration=Release

      - name: Decode the pfx
        run: |
          $pfx_cert_byte = [System.Convert]::FromBase64String("${{ secrets.BASE64_ENCODED_PFX }}")
          $certificatePath = "src\WinUi\GitHubActionsWorkflow.pfx"
          [IO.File]::WriteAllBytes("$certificatePath", $pfx_cert_byte)
      - name: Set env
        run: |
          cd src\WinUi
          $version = Powershell.exe -executionpolicy remotesigned -File "./find_version.ps1"
          $version = $version + "." + "$GITHUB_RUN_NUMBER"
          echo $GITHUB_RUN_NUMBER
          echo "$GITHUB_RUN_NUMBER"
          echo "${{ env.GITHUB_RUN_NUMBER }}"
          echo ("BUILD_VERSION=" + $version) >> $env:GITHUB_ENV

      - name: Create the app package
        run: msbuild src\WinUi\WinUi.csproj /p:Configuration=Release /p:Platform=x64 /p:UapAppxPackageBuildMode=$env:Appx_Package_Build_Mode /p:AppxBundle=$env:Appx_Bundle /p:PackageCertificateKeyFile=GitHubActionsWorkflow.pfx /p:AppxPackageDir="$env:Appx_Package_Dir" /p:GenerateAppxPackageOnBuild=true /p:Version=$env:Version
        env:
          Appx_Bundle: Never
          Appx_Package_Build_Mode: SideloadOnly
          Appx_Package_Dir: Packages\
          Version: ${{ env.BUILD_VERSION }}

      - name: Remove the pfx
        run: Remove-Item -path src\WinUi\GitHubActionsWorkflow.pfx

      - name: Upload MSIX package
        uses: actions/upload-artifact@v2
        with:
          name: MSIX Package
          path: src\WinUi\Packages

      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.BUILD_VERSION }}
          files: src\WinUi\Packages\**